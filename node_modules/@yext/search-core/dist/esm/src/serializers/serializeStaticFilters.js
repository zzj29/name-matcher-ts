import { isNumberRangeValue } from '../models/searchservice/common/NumberRangeValue';
export function serializeStaticFilters(filter) {
    if (filter.kind !== 'fieldValue') {
        var shapedFilter = shapeCombinedFilterForApi(filter.combinator, filter.filters);
        return shapedFilter && JSON.stringify(shapedFilter);
    }
    return JSON.stringify(shapeFieldValueFilterForApi(filter));
}
function shapeCombinedFilterForApi(combinator, filters) {
    var _a;
    var shapedFilters = [];
    for (var _i = 0, filters_1 = filters; _i < filters_1.length; _i++) {
        var filter = filters_1[_i];
        if (filter.kind !== 'fieldValue') {
            var shapedFilter = shapeCombinedFilterForApi(filter.combinator, filter.filters);
            shapedFilter && shapedFilters.push(shapedFilter);
        }
        else {
            shapedFilters.push(shapeFieldValueFilterForApi(filter));
        }
    }
    return shapedFilters.length === 0
        ? undefined
        : shapedFilters.length === 1
            ? shapedFilters[0]
            : (_a = {}, _a[combinator] = shapedFilters, _a);
}
export function shapeFieldValueFilterForApi(filter) {
    var _a, _b;
    var filterValues = {};
    if (isNumberRangeValue(filter.value)) {
        if (filter.value.start) {
            filterValues[filter.value.start.matcher] = filter.value.start.value;
        }
        if (filter.value.end) {
            filterValues[filter.value.end.matcher] = filter.value.end.value;
        }
    }
    else {
        filterValues = (_a = {}, _a[filter.matcher] = filter.value, _a);
    }
    return _b = {},
        _b[filter.fieldId] = filterValues,
        _b;
}
//# sourceMappingURL=serializeStaticFilters.js.map