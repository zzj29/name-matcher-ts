var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { createAutocompleteResponse, createFilterSearchResponse } from '../transformers/autocompleteservice/createAutocompleteResponse';
import { defaultApiVersion } from '../provideEndpoints';
import { getClientSdk } from '../utils/getClientSdk';
import { serializeExcludedFields, serializeSearchParameterFields } from '../serializers/serializeFilterSearch';
/**
* A service that performs query suggestions.
*/
var AutocompleteServiceImpl = /** @class */ (function () {
    function AutocompleteServiceImpl(config, httpRequester, apiResponseValidator) {
        this.config = config;
        this.httpService = httpRequester;
        this.apiResponseValidator = apiResponseValidator;
        this.universalEndpoint = this.config.endpoints.universalAutocomplete;
        this.verticalEndpoint = this.config.endpoints.verticalAutocomplete;
        this.filterEndpoint = this.config.endpoints.filterSearch;
    }
    AutocompleteServiceImpl.prototype.universalAutocomplete = function (request) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var queryParams, response, _d, validationResult;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        queryParams = __assign(__assign(__assign({ input: request.input, experienceKey: this.config.experienceKey }, ('apiKey' in this.config && { api_key: this.config.apiKey })), { v: defaultApiVersion, version: this.config.experienceVersion, locale: this.config.locale, sessionTrackingEnabled: request.sessionTrackingEnabled, visitorId: (_a = this.config.visitor) === null || _a === void 0 ? void 0 : _a.id, visitorIdMethod: (_b = this.config.visitor) === null || _b === void 0 ? void 0 : _b.idMethod }), (_c = this.config) === null || _c === void 0 ? void 0 : _c.additionalQueryParams);
                        if (!('token' in this.config)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.httpService.get(this.universalEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders), this.config.token)];
                    case 1:
                        _d = _e.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.httpService.get(this.universalEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders))];
                    case 3:
                        _d = _e.sent();
                        _e.label = 4;
                    case 4:
                        response = _d;
                        validationResult = this.apiResponseValidator.validate(response);
                        if (validationResult instanceof Error) {
                            return [2 /*return*/, Promise.reject(validationResult)];
                        }
                        return [2 /*return*/, createAutocompleteResponse(response)];
                }
            });
        });
    };
    AutocompleteServiceImpl.prototype.verticalAutocomplete = function (request) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var queryParams, response, _d, validationResult;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        queryParams = __assign(__assign(__assign({ input: request.input, experienceKey: this.config.experienceKey }, ('apiKey' in this.config && { api_key: this.config.apiKey })), { v: defaultApiVersion, version: this.config.experienceVersion, locale: this.config.locale, verticalKey: request.verticalKey, sessionTrackingEnabled: request.sessionTrackingEnabled, visitorId: (_a = this.config.visitor) === null || _a === void 0 ? void 0 : _a.id, visitorIdMethod: (_b = this.config.visitor) === null || _b === void 0 ? void 0 : _b.idMethod }), (_c = this.config) === null || _c === void 0 ? void 0 : _c.additionalQueryParams);
                        if (!('token' in this.config)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.httpService.get(this.verticalEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders), this.config.token)];
                    case 1:
                        _d = _e.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.httpService.get(this.verticalEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders))];
                    case 3:
                        _d = _e.sent();
                        _e.label = 4;
                    case 4:
                        response = _d;
                        validationResult = this.apiResponseValidator.validate(response);
                        if (validationResult instanceof Error) {
                            return [2 /*return*/, Promise.reject(validationResult)];
                        }
                        return [2 /*return*/, createAutocompleteResponse(response)];
                }
            });
        });
    };
    AutocompleteServiceImpl.prototype.filterSearch = function (request) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var searchParams, queryParams, response, _d, validationResult;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        searchParams = {
                            sectioned: request.sectioned,
                            fields: serializeSearchParameterFields(request.fields)
                        };
                        queryParams = __assign(__assign(__assign({ input: request.input, experienceKey: this.config.experienceKey }, ('apiKey' in this.config && { api_key: this.config.apiKey })), { v: defaultApiVersion, version: this.config.experienceVersion, locale: this.config.locale, search_parameters: JSON.stringify(searchParams), verticalKey: request.verticalKey, sessionTrackingEnabled: request.sessionTrackingEnabled, visitorId: (_a = this.config.visitor) === null || _a === void 0 ? void 0 : _a.id, visitorIdMethod: (_b = this.config.visitor) === null || _b === void 0 ? void 0 : _b.idMethod, excluded: JSON.stringify(serializeExcludedFields(request.excluded)) }), (_c = this.config) === null || _c === void 0 ? void 0 : _c.additionalQueryParams);
                        if (!('token' in this.config)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.httpService.get(this.filterEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders), this.config.token)];
                    case 1:
                        _d = _e.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.httpService.get(this.filterEndpoint, queryParams, getClientSdk(request.additionalHttpHeaders))];
                    case 3:
                        _d = _e.sent();
                        _e.label = 4;
                    case 4:
                        response = _d;
                        validationResult = this.apiResponseValidator.validate(response);
                        if (validationResult instanceof Error) {
                            return [2 /*return*/, Promise.reject(validationResult)];
                        }
                        return [2 /*return*/, createFilterSearchResponse(response)];
                }
            });
        });
    };
    return AutocompleteServiceImpl;
}());
export { AutocompleteServiceImpl };
//# sourceMappingURL=AutocompleteServiceImpl.js.map