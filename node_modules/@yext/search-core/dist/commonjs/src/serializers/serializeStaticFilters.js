"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shapeFieldValueFilterForApi = exports.serializeStaticFilters = void 0;
const NumberRangeValue_1 = require("../models/searchservice/common/NumberRangeValue");
function serializeStaticFilters(filter) {
    if (filter.kind !== 'fieldValue') {
        const shapedFilter = shapeCombinedFilterForApi(filter.combinator, filter.filters);
        return shapedFilter && JSON.stringify(shapedFilter);
    }
    return JSON.stringify(shapeFieldValueFilterForApi(filter));
}
exports.serializeStaticFilters = serializeStaticFilters;
function shapeCombinedFilterForApi(combinator, filters) {
    const shapedFilters = [];
    for (const filter of filters) {
        if (filter.kind !== 'fieldValue') {
            const shapedFilter = shapeCombinedFilterForApi(filter.combinator, filter.filters);
            shapedFilter && shapedFilters.push(shapedFilter);
        }
        else {
            shapedFilters.push(shapeFieldValueFilterForApi(filter));
        }
    }
    return shapedFilters.length === 0
        ? undefined
        : shapedFilters.length === 1
            ? shapedFilters[0]
            : { [combinator]: shapedFilters };
}
function shapeFieldValueFilterForApi(filter) {
    let filterValues = {};
    if ((0, NumberRangeValue_1.isNumberRangeValue)(filter.value)) {
        if (filter.value.start) {
            filterValues[filter.value.start.matcher] = filter.value.start.value;
        }
        if (filter.value.end) {
            filterValues[filter.value.end.matcher] = filter.value.end.value;
        }
    }
    else {
        filterValues = { [filter.matcher]: filter.value };
    }
    return {
        [filter.fieldId]: filterValues
    };
}
exports.shapeFieldValueFilterForApi = shapeFieldValueFilterForApi;
//# sourceMappingURL=serializeStaticFilters.js.map