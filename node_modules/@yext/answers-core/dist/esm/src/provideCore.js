var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { SearchServiceImpl } from './infra/SearchServiceImpl';
import { QuestionSubmissionServiceImpl } from './infra/QuestionSubmissionServiceImpl';
import { HttpServiceImpl } from './infra/HttpServiceImpl';
import { AutocompleteServiceImpl } from './infra/AutocompleteServiceImpl';
import { ApiResponseValidator } from './validation/ApiResponseValidator';
import { AnswersCore } from './AnswersCore';
import { defaultEndpoints } from './constants';
/**
 * The entrypoint to the answers-core library.
 *
 * @remarks
 * Returns an {@link AnswersCore} instance.
 *
 * @param config - The answers-core config
 *
 * @public
 */
export function provideCore(config) {
    if ('apiKey' in config && 'token' in config) {
        throw new Error('Both apiKey and token are present. Only one authentication method should be provided');
    }
    var defaultedConfig = __assign(__assign({}, config), { endpoints: __assign(__assign({}, defaultEndpoints), config.endpoints) });
    var httpService = new HttpServiceImpl();
    var apiResponseValidator = new ApiResponseValidator();
    var searchService = new SearchServiceImpl(defaultedConfig, httpService, apiResponseValidator);
    var questionSubmissionService = new QuestionSubmissionServiceImpl(defaultedConfig, httpService, apiResponseValidator);
    var autoCompleteService = new AutocompleteServiceImpl(defaultedConfig, httpService, apiResponseValidator);
    return new AnswersCore(searchService, questionSubmissionService, autoCompleteService);
}
//# sourceMappingURL=provideCore.js.map